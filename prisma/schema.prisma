// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Maps {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  isDefusal   Boolean
  Games       Games[]
  GlobalStats GlobalStats[]
  PlayerStats PlayerStats[]
}

model Games {
  id               Int           @id @default(autoincrement())
  Map              Maps          @relation(fields: [mapId], references: [id])
  mapId            Int
  Host             Players       @relation(fields: [hostId], references: [id])
  hostId           Int
  datePlayed       DateTime
  dateCreated      DateTime      @default(now())
  roundsPlayed     Int
  counterScore     Int
  terroristScore   Int
  winningTeam      TeamTypes
  validationImgSrc String?
  isApproved       Boolean       @default(false)
  GamesPlayed      GamesPlayed[]
}

model Players {
  id             Int           @id @default(autoincrement())
  name           String
  nickname       String
  averageKills   Float         @default(0)
  averageAssists Float         @default(0)
  averageDeaths  Float         @default(0)
  GamesPlayed    GamesPlayed[]
  PlayerStats    PlayerStats[]
  GamesHosting   Games[]
}

model GamesPlayed {
  id       Int       @id @default(autoincrement())
  Game     Games     @relation(fields: [gameId], references: [id])
  gameId   Int
  Player   Players   @relation(fields: [playerId], references: [id])
  playerId Int
  kills    Int
  assists  Int
  deaths   Int
  score    Int
  team     TeamTypes

  @@map("GamePlayers")
}

enum TeamTypes {
  T
  CT
}

model GlobalStats {
  id          Int     @id @default(autoincrement())
  type        String // e.g., "rounds_per_map", "winning_team_per_map", etc.
  map         Maps?   @relation(fields: [mapId], references: [id])
  mapId       Int?
  value       Float // depending on type this can be average, total, percentage, etc.
  description String?
}

model PlayerStats {
  id          Int     @id @default(autoincrement())
  type        String // e.g., "avg_score", "avg_per_map", etc.
  Map         Maps?   @relation(fields: [mapId], references: [id])
  mapId       Int?
  Player      Players @relation(fields: [playerId], references: [id])
  playerId    Int
  value       Float // depending on type this can be average, total, percentage, etc.
  description String?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
